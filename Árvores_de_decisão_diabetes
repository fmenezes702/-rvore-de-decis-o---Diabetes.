#importando bibliotecas.


import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics


col_names = ['pregnant', 'glucose', 'bp', 'skin', 'insulin', 'bmi', 'pedigree', 'age', 'label']
# carregando os dados
df = pd.read_csv("diabetes.csv", header=None, names=col_names)


df.head()


#split dataset in features and target variable
feature_cols = ['pregnant', 'insulin', 'bmi', 'age','glucose','bp','pedigree']
X = df[feature_cols] # Features
y = df.label # Target variable


# eparando a base de dados em base de dados de teste e base de dados de treinamento.
# 70% treino, 30% teste.
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)  


# criar objeto de árvore de decisão.
clf = DecisionTreeClassifier()


# Treinar classificador de árvore de decisão.
clf = clf.fit(X_train,y_train)


#prever a resposta para a base de dados.
y_pred = clf.predict(X_test)


# Acurácia do modelo.
acuracia = metrics.accuracy_score(y_test, y_pred)


# criar objeto de árvore de decisão.
clf = DecisionTreeClassifier(criterion="entropy", max_depth=3)


# classificador de treino da árvore de decisão.
clf = clf.fit(X_train,y_train)


y_pred = clf.predict(X_test)


# Acurácia do modelo.
acuracia_2 = metrics.accuracy_score(y_test, y_pred)
print(acuracia)
